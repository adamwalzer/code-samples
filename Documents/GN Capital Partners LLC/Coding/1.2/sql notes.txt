SELECT Menu_Item_Option_Group. * 
FROM Menu_Item_Option_Group
JOIN (

SELECT rest_id, item_id, group_order, updated, group_id, COUNT( * ) AS NumDuplicates
FROM Menu_Item_Option_Group
GROUP BY rest_id, item_id, group_order, updated, group_id
HAVING NumDuplicates >1
)tsum ON Menu_Item_Option_Group.rest_id = tsum.rest_id
AND Menu_Item_Option_Group.item_id = tsum.item_id
AND Menu_Item_Option_Group.group_order = tsum.group_order
AND Menu_Item_Option_Group.updated = tsum.updated
AND Menu_Item_Option_Group.group_id != tsum.group_id
ORDER BY  `Menu_Item_Option_Group`.`updated` ASC 



1. Write a query to return the course lesson IDs and when those lessons were viewed by 'ted@grovo.com' on 3/27/2013. Order the results by when the lesson was viewed (ascending).

SELECT courselesson_id, view_timestamp
FROM `lessonviews`
WHERE `user_id` IN
(
	SELECT id
	FROM `users`
	WHERE `email`='ted@grovo.com'
)
AND `view_timestamp` > '2013-03-27 00:00:00'
AND `view_timestamp` < '2013-03-28 00:00:00'
ORDER BY `view_timestamp` ASC


2. Write a query to return the total number of lessons viewed by each email domain. Sort the results by the number of lessons viewed. The results should look something like:
domain  | views
abc.org | 12
xyz.com | 150
jfk.net | 2134

SELECT column_name(s)
FROM table1
JOIN table2
ON table1.column_name=table2.column_name;

SELECT domain, SUM(count) AS views
FROM
(
	SELECT user_id, COUNT(*) AS count FROM `lessonviews` GROUP BY user_id
) AS counts_per_user
JOIN
(
	SELECT id, (SUBSTR(`users`.email, INSTR(`users`.email, '@') + 1)) AS domain
	FROM `users`
) AS ids_and_domains
ON counts_per_user.user_id = ids_and_domains.id
GROUP BY domain
ORDER BY views ASC

SELECT user_id AS id, COUNT(*) FROM `lessonviews` GROUP BY user_id

SELECT id, (SUBSTR(`users`.email, INSTR(`users`.email, '@') + 1))
	FROM `users`

SELECT id, COUNT(*)
FROM `lessonviews`
WHERE user_id IN
(
	SELECT id, (SUBSTR(`users`.email, INSTR(`users`.email, '@') + 1))
	FROM `users`
)


3. Write a query to find all the records in the lessonviews table that have user_id values that do not exist as id values in the users table. Bonus: Provide an alternative query with a different structure that accomplishes the same goal.



SELECT *
FROM `lessonviews`
WHERE `user_id` NOT IN
(
	SELECT DISTINCT(id)
	AS id
	FROM `users`
)

SELECT table_1.* FROM table_1 
     LEFT JOIN table_2 ON table1.id=table_2.id
WHERE table_2.id IS NULL;

SELECT `lessonviews`.*
FROM `lessonviews`
	LEFT JOIN `users`
	ON `lessonviews`.user_id=`users`.id
WHERE `users`.id IS NULL

SELECT *
FROM `lessonviews`
WHERE `user_id` IN
(
	SELECT DISTINCT(user_id)
	AS user_id
	FROM `lessonviews`
	WHERE `user_id` NOT IN
	(
		SELECT DISTINCT(id)
		AS user_id
		FROM `users`
	)
)


4. How would you modify this database to make sure such a condition would never happen again? Please provide an answer in both plain English and in a MySql statement.

I would create a trigger to set the new user_id of the inserted row to null if it were not in the users table. This would prevent the new row from being input.

DELIMITER //
CREATE TRIGGER `test_before_insert`
	BEFORE INSERT ON `lessonviews` FOR EACH ROW
	BEGIN
		IF NOT EXISTS ( SELECT id FROM `users` WHERE id = NEW.user_id )
		THEN 
		SET NEW.user_id = NULL;
		END IF;
	END

5. If you actually tried to make this modification to your database, you might have noticed that there was an error. How would you "scrub" the data, so that you could run your statement(s) from Question 4?








function loadPage()
{
	var src = "./img/background"+getRandomInt(6,10)+".jpg";
	$('body').css('backgroundImage','url('+src+')');
	if(src == "./img/background7.jpg")
	{
		$('#ribbon').addClass('ribbon_border');
	}
	
	start();
}

function getRandomInt(min, max)
{
    return Math.floor(Math.random() * (max - min + 1)) + min;
}